>>>>>>>>>>>>>>>>>>>>>>>>>> TERRAFORM BACKEND <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
By default, Terraform implicitly uses a backend called local to store state as a local file on disk. (Once plan and apply is done a backend is created in local)
An Ideal Architecture is the terraform code is stored in Git Repository and the state file is stored in a Central backend.
some popular Backends are  S3, Consul, Azurerm, Kubernetes, HTTP, ETCD
* accessing state in a remote service generally requires some kind of a access credentials 
download aws cli and add the creds, in .aws folder you can see config and credentials files . credentials is the file where access key and secret keys are stored.


>>>>>>>>>>>>>>>>>>>>>>>>>>> STATE FILE LOCKING OR STATE LOCKING <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
* Whenever you are performing write operation, terraform would lock the state file. it can corrupt state file, if others are also try the same.
Error: Error acquiring the state lock


* State locking happens automatically on all operations that could write state, we cant see any message that it is happening.
* If state locking fails, Terraform will not continue
* Not all backends support locking. the documentation for wach backend includes details on whether it supports locking or not

>>>>>>>>>>>>>>>>>>>>>>>>>>>>> FORCE UNLOCKING STATE <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
Terraform has a force-unlock command to manually unlock the stat  if unlocking failed
If you unlock the state when someone else is holding the lock it could cause mutliple writers. 
Force unlock should only be used to unlock your own lock in the situation where automatic unlocking failed

terraform.tfstate
.terraform.lock.hcl
.terraform.tfstate.lock.info : contains the lock ID details, operation, other info like who is working and where the lock is applied like path etc..

* If you wish to automatic migration of the state, use "terraform init -migrate-state".
* If you wish to store the current configuration with no changes to the state, use "terraform init -reconfigure".
